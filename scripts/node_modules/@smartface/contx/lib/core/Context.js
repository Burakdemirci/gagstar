(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./constants", "./util/raiseErrorMaybe"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./constants"), require("./util/raiseErrorMaybe"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.constants, global.raiseErrorMaybe);
    global.Context = mod.exports;
  }
})(this, function (exports, _constants, _raiseErrorMaybe) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInitAction = createInitAction;
  exports.default = createContext;

  var _raiseErrorMaybe2 = _interopRequireDefault(_raiseErrorMaybe);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function createInitAction() {
    return {
      type: _constants.INIT_CONTEXT_ACTION_TYPE
    };
  }

  function createContext(actors, reducer) {
    var initialState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var hookMaybe = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    var Context = function () {
      function Context() {
        var _this = this;

        _classCallCheck(this, Context);

        this.setActors = function (actors) {
          Object.keys(actors).forEach(function (name) {
            // if(oldActors.collection[name]){
            //   this.actors.collection[name] !== actors[name]
            //   this.actors.collection[name] = actors[name];
            //   actors[name].setContextDispatcher((action, target) => this.dispatch(action, target));
            //   this.actors.$$map.push(name);
            // } else {

            /*this.actors.collection[name] = actors[name];
            actors[name].hook = hookMaybe;
            actors[name].setContextDispatcher((action, target) => this.dispatch(action, target));
            this.actors.$$map.push(name);*/

            _this.add(actors[name], name);
            // }
          });

          _this.propagateAll();
        };

        this.map = function (fn) {
          var acc = {};
          _this.actors.$$map.forEach(function (name, index) {
            acc[name] = fn(_this.actors.collection[name], name, index);
          });

          return acc;
        };

        this.find = function (name, notValue) {
          return _this.actors.collection[name] || notValue;
        };

        this.addTree = function (tree) {
          Object.keys(tree).forEach(function (name) {
            return _this.add(tree[name], name);
          });
        };

        this.add = function (actor, name) {
          if (_this.actors.collection[name]) {
            (0, _raiseErrorMaybe2.default)(new Error("Child's name [" + name + "] must be unique in the same Container."), actor.onError);
          }

          _this.actors.collection[name] = actor;
          _this.actors.$$map.push(name);
          actor.hook = hookMaybe;
          actor.didComponentEnter(function (action, target) {
            return _this.dispatch(action, target);
          });
        };

        this.removeChildren = function (name) {
          _this.actors.$$map.forEach(function (nm) {
            if (nm.indexOf(name + "_") === 0) {
              var actor = _this.actors.collection[nm];
              actor.didComponentLeave();
              actor.dispose();
              delete _this.actors.collection[nm];
            }
          });

          _this.actors.$$map = Object.keys(_this.actors.collection);
        };

        this.remove = function (name) {
          _this.removeChildren(name);

          var actor = _this.actors.collection[name];

          if (actor) {
            delete _this.actors.collection[name];
            _this.actors.$$map = Object.keys(_this.actors.collection);
            actor.didComponentLeave();
            actor.dispose();
          }
        };

        this.setState = function (state) {
          if (state !== _this.state) {
            var oldState = _this.state;
            _this.state = Object.assign({}, state);
            _this.propagateAll(state, oldState);
          }
        };

        this.propagateAll = function () {
          _this.actors.$$map.map(function (name) {
            var actor = _this.actors.collection[name];
            actor.onContextChange && actor.onContextChange(_this);
          });
        };

        this.getState = function () {
          return Object.assign({}, _this.state);
        };

        this.dispatch = function (action, target) {
          try {
            var state = reducer(_this, action, target);
            _this.setState(state);
          } catch (e) {
            e.message = "An Error is occurred When action [" + action.type + "] run on target [" + target + "]. " + e.message;
            (0, _raiseErrorMaybe2.default)(e, _this.actors.collection[target].onError);
          }
        };

        this.dispose = function () {
          _this.state = null;
          _this.actors = null;
        };

        this.actors = { collection: {}, $$map: [] };
        this.state = Object.assign({}, initialState);
        this.setActors(Object.assign({}, actors));
        this.dispatch({ type: _constants.INIT_CONTEXT_ACTION_TYPE });
      }

      Context.prototype.subcribe = function subcribe(fn) {};

      return Context;
    }();

    ;

    return new Context();
  }
});