(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.Actor = mod.exports;
  }
})(this, function (module, exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Actor =
  /**
   * @constructor
   * @param {object} component - Wrapped Component
   */
  function Actor(component) {
    var _this = this;

    _classCallCheck(this, Actor);

    this.setDirty = function (value) {
      _this.isDirty = value;
    };

    this.getDirty = function (value) {
      return _this.isDirty;
    };

    this.onRemove = function () {
      _this._actorInternal_.component.onRemove && _this._actorInternal_.component.onRemove();
    };

    this.onError = function (err) {
      if (_this._actorInternal_.component.onError) return _this._actorInternal_.component.onError(err);
      return false;
    };

    this.didComponentLeave = function () {
      typeof _this._actorInternal_.component.didComponentLeave === 'function' && _this._actorInternal_.component.didComponentLeave();
    };

    this.didComponentEnter = function (dispatcher) {
      _this._dispatcher = dispatcher;
      _this._actorInternal_.component.setContextDispatcher ? _this._actorInternal_.component.setContextDispatcher(function (action) {
        dispatcher(action, _this.getName());
      }) : _this._actorInternal_.component.dispatch = function (action) {
        dispatcher(action, _this.getName());
      };
    };

    this._actorInternal_ = {};
    this._actorInternal_.component = component;
    this.isDirty = true;
    this.hooks = null;
  };

  exports.default = Actor;
  module.exports = exports['default'];
});