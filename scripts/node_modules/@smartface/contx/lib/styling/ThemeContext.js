(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../core/constants", "../core/Context", "@smartface/styler/lib/utils/merge", "@smartface/styler/lib/buildStyles", "@smartface/styler/lib/styler", "../core/Actor"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../core/constants"), require("../core/Context"), require("@smartface/styler/lib/utils/merge"), require("@smartface/styler/lib/buildStyles"), require("@smartface/styler/lib/styler"), require("../core/Actor"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.constants, global.Context, global.merge, global.buildStyles, global.styler, global.Actor);
    global.ThemeContext = mod.exports;
  }
})(this, function (exports, _constants, _Context, _merge, _buildStyles, _styler, _Actor2) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createThemeContextBound = createThemeContextBound;

  var _Context2 = _interopRequireDefault(_Context);

  var _merge2 = _interopRequireDefault(_merge);

  var _buildStyles2 = _interopRequireDefault(_buildStyles);

  var _styler2 = _interopRequireDefault(_styler);

  var _Actor3 = _interopRequireDefault(_Actor2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Theme = function () {
    function Theme(_ref) {
      var name = _ref.name,
          rawStyles = _ref.rawStyles,
          isDefault = _ref.isDefault;

      _classCallCheck(this, Theme);

      this.name = name;
      this.rawStyles = rawStyles;
      this.setDefault(isDefault);
    }

    Theme.prototype.setDefault = function setDefault(value) {
      this.isDefault = value;
      value && this.build();
    };

    Theme.prototype.build = function build() {
      if (!this.bundle) {
        this.bundle = (0, _buildStyles2.default)(this.rawStyles);
      }
    };

    Theme.prototype.asStyler = function asStyler() {
      return (0, _styler2.default)(this.bundle);
    };

    return Theme;
  }();

  var Themeable = function (_Actor) {
    _inherits(Themeable, _Actor);

    function Themeable(pageContext) {
      _classCallCheck(this, Themeable);

      var _this = _possibleConstructorReturn(this, _Actor.call(this, pageContext));

      _this.whenContextChanged = function (state, oldState) {
        if (state.theme !== oldState.theme) {
          _this.pageContext(state.theme.asStyler());
        }
      };

      _this.pageContext = pageContext;
      return _this;
    }

    Themeable.prototype.changeTheme = function changeTheme(theme) {
      this.pageContext(theme.asStyler());
    };

    return Themeable;
  }(_Actor3.default);

  /**
   * Style Context. Returns context composer
   * 
   * @param {Array.<{name:string, rawStyles:Object, isDefault:boolean}>} themes - h List
   * @param {function} hooks - Hooks factory
   * 
   * @returns {function} - Context dispatcher
   */
  function createThemeContextBound(themes) {
    var themesCollection = themes.map(function (theme) {
      return new Theme(theme);
    });

    function themesReducer(context, action, target) {
      var _context$setActors;

      var state = context.getState(),
          newState = state;

      switch (action.type) {
        case 'addThemeableContext':
          // make declarative
          context.setActors((_context$setActors = {}, _context$setActors[action.name] = new Themeable(action.pageContext), _context$setActors));
          context.map(function (actor) {
            state.theme instanceof Theme && actor.changeTheme(state.theme);
          });

          break;
        case 'changeTheme':
          return _extends({}, state, {
            theme: themesCollection.find(function (theme) {
              return theme.name === action.themeName;
            })
          });
        default:
          return newState;
      }
    }

    return function () {
      var context = (0, _Context2.default)(
      // creates themes actors
      {}, themesReducer,
      // initial state
      { theme: themesCollection.find(function (theme) {
          return theme.isDefault === true;
        }) });

      return function themeContextDispatch(action) {
        if (action === null) {
          context.dispose();
        } else if (context) {
          context.dispatch(action);
        }
      };
    };
  }
});